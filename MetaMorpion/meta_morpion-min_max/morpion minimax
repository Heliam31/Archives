#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;
int winner(int (&occupied)[3][3]);
bool end(int (&occupied)[3][3], int vac);
int minimax(int (&occupied)[3][3], int h, bool player_turn);

bool end(int (&occupied)[3][3], int vac) // passage par reference pour eviter la copie
{
    return (vac==0 || winner(occupied)==1 || winner(occupied)==-1);
}
int winner(int (&occupied)[3][3]) // passage par reference pour eviter la copie
{
    if (
        (occupied[0][0]==1 && occupied[0][1] ==1 && occupied[0][2]==1) ||
        (occupied[1][0]==1 && occupied[1][1] ==1 && occupied[1][2]==1) ||
        (occupied[2][0]==1 && occupied[2][1] ==1 && occupied[2][2]==1) ||
        (occupied[0][0]==1 && occupied[1][0] ==1 && occupied[2][0]==1) ||
        (occupied[0][1]==1 && occupied[1][1] ==1 && occupied[2][1]==1) ||
        (occupied[0][2]==1 && occupied[1][2] ==1 && occupied[2][2]==1) ||
        (occupied[0][0]==1 && occupied[1][1] ==1 && occupied[2][2]==1) ||
        (occupied[2][0]==1 && occupied[1][1] ==1 && occupied[0][2]==1)
        )
    {
            return 1;
    } else if (
        (occupied[0][0]==-1 && occupied[0][1] ==-1 && occupied[0][2]==-1) ||
        (occupied[1][0]==-1 && occupied[1][1] ==-1 && occupied[1][2]==-1) ||
        (occupied[2][0]==-1 && occupied[2][1] ==-1 && occupied[2][2]==-1) ||
        (occupied[0][0]==-1 && occupied[1][0] ==-1 && occupied[2][0]==-1) ||
        (occupied[0][1]==-1 && occupied[1][1] ==-1 && occupied[2][1]==-1) ||
        (occupied[0][2]==-1 && occupied[1][2] ==-1 && occupied[2][2]==-1) ||
        (occupied[0][0]==-1 && occupied[1][1] ==-1 && occupied[2][2]==-1) ||
        (occupied[2][0]==-1 && occupied[1][1] ==-1 && occupied[0][2]==-1)
        ) 
    {
        return -1;
    } else 
    {
        return 0;
    }
}

int minimax(int (&occupied)[3][3], int vac, bool player_turn)
{
    if (end(occupied, vac))
    {
        return (1+vac)*winner(occupied);
    }
    int best_score;
    if (player_turn)
    {
        best_score=-500000;
        for (int i=0;i<3;i++)
        {
            for (int j=0;j<3;j++)
            {
                if (occupied[i][j]==0)
                {
                    occupied[i][j]=1;
                    int score=minimax(occupied,vac-1,false);
                    occupied[i][j]=0;
                    best_score=max(best_score,score);
                }
                    
            }
        }
    } else 
    {
        best_score=+500000;
        for (int i=0;i<3;i++)
        {
            for (int j=0;j<3;j++)
            {
                if (occupied[i][j]==0)
                {
                    occupied[i][j]=-1;
                    int score=minimax(occupied,vac-1,true);
                    occupied[i][j]=0;
                    best_score=min(best_score,score);
                }
                    
            }
        }
    }
    return best_score;
}

int main()
{
int move[2];
bool player_turn;
int occupied[3][3];
for (int i = 0;i<3;i++)
{
    for (int j = 0;j<3;j++)
    {
        occupied[i][j]=0;
    }
}
    while (1) {
        int opponent_row;
        int opponent_col;
        cin >> opponent_row >> opponent_col; cin.ignore();
        int valid_action_count;
        cin >> valid_action_count; cin.ignore();
        if (opponent_row!=-1)
        {
            occupied[opponent_row][opponent_col]=-1;
        }
        player_turn=true;
        int best_score=-500000;
        for (int i = 0; i < valid_action_count; i++) {
            int row;
            int col;
            cin >> row >> col; cin.ignore();
            occupied[row][col]=1;
            int stock = minimax(occupied,valid_action_count,player_turn);
            if(best_score<stock)
            {
                best_score=stock;
                move[0]=row;
                move[1]=col;
            }
            occupied[row][col]=0;
        }
        occupied[move[0]][move[1]]=1;
        cout << move[0] << " " << move[1] << endl;
    }
}
