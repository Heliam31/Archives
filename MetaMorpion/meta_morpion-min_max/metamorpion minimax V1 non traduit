#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#define SIZE 9
using namespace std;
int winner(int (&occupied)[SIZE][SIZE], int id);
bool end(int (&occupied)[SIZE][SIZE], int h, int id);
int minimax(int (&occupied)[SIZE][SIZE], int h, bool player_turn,int playable[SIZE][SIZE],bool (&avaible)[SIZE],int (&matrix_eval)[SIZE][SIZE], int (&sum)[SIZE],int i, int j, int id);
int eval(int (&plyable)[SIZE][SIZE],int (&matrix_eval)[SIZE][SIZE],int (&sum)[SIZE], int i, int j, int id, bool player_turn);
void matrix_generate(int (&matrix_eval)[SIZE][SIZE],int i,int j);
void update_sum(int (&occupied)[SIZE][SIZE],int (&matrix_eval)[SIZE][SIZE],int (&sum)[SIZE],bool player_turn, int i, int j, int id);
bool closed(int (&avaible)[SIZE], int id, int (&occupied)[SIZE][SIZE]);
int tictactoe_sum(int (&playable)[SIZE][SIZE],int (&matrix_eval)[SIZE][SIZE], int id); 
int tictactoe_mult(int (&occupied)[SIZE][SIZE], int id);
int tictactoe_id(int i, int j);
int * tictactoe_limit(int id);
void playable_next_generate(int (&occupied)[SIZE][SIZE],int (&playable_next)[SIZE][SIZE], bool (&avaible)[SIZE], int i, int j, int id);


int cpt=0; // compteur de call 
int cpt2=0;
int cpt3=0;
int cpt4=0;
int cpt5=0;
int cpt6=0;
int cpt7=0;
int cpt8=0;

/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
bool end(int (&occupied)[SIZE][SIZE], int h, int id) // passage par reference pour eviter la copie
{   //cpt2++;
    //cerr<<"cpt2 end : "<<cpt2<<endl;

    return (h==0 || winner(occupied, id)==1 || winner(occupied, id)==-1);
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int winner(int (&occupied)[SIZE][SIZE],int id) // passage par reference pour eviter la copie
{
    //cpt3++;
    //cerr<<"cpt3 winner : "<<cpt3<<endl;
    int *limit=tictactoe_limit(id);
    int i=limit[0];
    int j=limit[1];

    if (
        (occupied[i][j]==1      && occupied[i][j+1]==1     && occupied[i][j+2]==1) ||
        (occupied[i+1][j]==1    && occupied[i+1][j+1]==1   && occupied[i+1][j+2]==1) ||
        (occupied[i+2][j]==1    && occupied[i+2][j+1]==1   && occupied[i+2][j+2]==1) ||
        (occupied[i][j]==1      && occupied[i+1][j]==1     && occupied[i+2][j]==1) ||
        (occupied[i][j+1]==1    && occupied[i+1][j+1]==1   && occupied[i+2][j+1]==1) ||
        (occupied[i][j+2]==1    && occupied[i+1][j+2]==1   && occupied[i+2][j+2]==1) ||
        (occupied[i][j]==1      && occupied[i+1][j+1]==1   && occupied[i+2][j+2]==1) ||
        (occupied[i+2][j]==1    && occupied[i+1][j+1]==1   && occupied[i][j+2]==1)
        )
    {
            return 1;
    } else if (
        (occupied[i][j]==-1      && occupied[i][j+1]==-1     && occupied[i][j+2]==-1) ||
        (occupied[i+1][j]==-1    && occupied[i+1][j+1]==-1   && occupied[i+1][j+2]==-1) ||
        (occupied[i+2][j]==-1    && occupied[i+2][j+1]==-1   && occupied[i+2][j+2]==-1) ||
        (occupied[i][j]==-1      && occupied[i+1][j]==-1     && occupied[i+2][j]==-1) ||
        (occupied[i][j+1]==-1    && occupied[i+1][j+1]==-1   && occupied[i+2][j+1]==-1) ||
        (occupied[i][j+2]==-1    && occupied[i+1][j+2]==-1   && occupied[i+2][j+2]==-1) ||
        (occupied[i][j]==-1      && occupied[i+1][j+1]==-1   && occupied[i+2][j+2]==-1) ||
        (occupied[i+2][j]==-1    && occupied[i+1][j+1]==-1   && occupied[i][j+2]==-1)
        )
    {
        return -1;
    } else 
    {
        return 0;
    }
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int tictactoe_id(int i, int j)
{
//cpt5++;
//cerr<<"cpt 5 id: "<<cpt5<<endl;
    int id;
    if(((i==0) || (i==1) || (i==2)) && ((j==0) || (j==1) || (j==2))) {id=0;}
    if(((i==0) || (i==1) || (i==2)) && ((j==3) || (j==4) || (j==5))) {id=1;}
    if(((i==0) || (i==1) || (i==2)) && ((j==6) || (j==7) || (j==8))) {id=2;}
    if(((i==3) || (i==4) || (i==5)) && ((j==0) || (j==1) || (j==2))) {id=3;}
    if(((i==3) || (i==4) || (i==5)) && ((j==3) || (j==4) || (j==5))) {id=4;}
    if(((i==3) || (i==4) || (i==5)) && ((j==6) || (j==7) || (j==8))) {id=5;}
    if(((i==6) || (i==7) || (i==8)) && ((j==0) || (j==1) || (j==2))) {id=6;}
    if(((i==6) || (i==7) || (i==8)) && ((j==3) || (j==4) || (j==5))) {id=7;}
    if(((i==6) || (i==7) || (i==8)) && ((j==6) || (j==7) || (j==8))) {id=8;}
    return id;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int* tictactoe_limit(int id)
{
    static int limit[2];
    //cpt8++;
    //cerr<<"cpt8 : "<<cpt8<<endl;
    if (id==0) {limit[0]=0;limit[1]=0;}
    if (id==1) {limit[0]=0;limit[1]=3;}
    if (id==2) {limit[0]=0;limit[1]=6;}
    if (id==3) {limit[0]=3;limit[1]=0;}
    if (id==4) {limit[0]=3;limit[1]=3;}
    if (id==5) {limit[0]=3;limit[1]=6;}
    if (id==6) {limit[0]=6;limit[1]=0;}
    if (id==7) {limit[0]=6;limit[1]=3;}
    if (id==8) {limit[0]=6;limit[1]=6;}
    return limit;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int tictactoe_sum(int (&occupied)[SIZE][SIZE], int (&matrix_eval)[SIZE][SIZE],int id)
{ 
    int sum = 0;
    int *limit=tictactoe_limit(id);
    for (int i=limit[0];i<(limit[0]+3);i++)
    {
        for (int j=limit[1];j<(limit[1]+3);j++)
        {
            if (occupied[i][j]==0)
            {
                sum+=matrix_eval[i][j];
            }
        }
    }
    return sum;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int tictactoe_mult(int (&occupied)[SIZE][SIZE], int id)
{   //cpt7++;
    //cerr<<"cpt7 mult : "<<cpt7<<endl;
    int mult = 0;
    int *limit=tictactoe_limit(id);
    int i=limit[0];
    int j=limit[1];

    for (i;i<(limit[0]+3);i++)
    {
        for (j;j<(limit[1]+3);j++)
        {
            mult*=occupied[i][j];
        }
    }
    return mult;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
bool closed(int (&avaible)[SIZE], int id, int (&occupied)[SIZE][SIZE])
{                   

    if (avaible[id])
    {
        avaible[id]=(tictactoe_mult(occupied,id)==0); // multiplication par 0 qui veut dire libre dans occupied, donc si 1 seul libre, retourne mult==0 = true sinon actualise en false
    }
    return (avaible[id]);
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
void playable_next_generate(int (&occupied)[SIZE][SIZE],int (&playable_next)[SIZE][SIZE], bool (&avaible)[SIZE],int i, int j,int id)
{
    //cpt4++;
    //cerr<<"cpt 4 generate: "<<cpt4<<endl;
    if (avaible[id])
    {
        for (int i_ = 0;i<9;i++)
        {
            for (int j_ = 0;j<9;j++)
            {
                if(occupied[i_][j_]!=0) // tableau inverse 
                {
                    playable_next[i_][j_]=2; // 2 = occupé mais different de -1 et 1, et pas 0 car déja initialisé à 0. 0 servira pour libre comme occupied
                }
            }
        }
    } else
    {
        int *limit=tictactoe_limit(id);
        int i=limit[0];
        int j=limit[1];

        for (i;i<(limit[0]+3);i++)
        {
            for (j;j<(limit[1]+3);j++)
            {
                if(occupied[i][j]==0)
                {
                    playable_next[i][j]=0;
                } else 
                {
                    playable_next[i][j]=2;
                }
            }
        }
    }
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/

void matrix_generate(int (&matrix_eval)[SIZE][SIZE],int i,int j)
{
    int i_=i%3;
    int j_=j%3;
    if((i_==1 && j_==1))
    {
        matrix_eval[i][j]=6;
    }
    if((i_==0 && j_==0) || (i_==0 && j_==2) || (i_==2 && j_==0)  || (i_==2 && j_==2))
    {
        matrix_eval[i][j]=4;
    }
    if((i_==0 && j_==1) || (i_==1 && j_==0) || (i_==1 && j_==2)  || (i_==2 && j_==1))
    {
        matrix_eval[i][j]=2;
    }
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
void update_sum(int (&occupied)[SIZE][SIZE],int (&matrix_eval)[SIZE][SIZE],int (&sum)[SIZE], bool player_turn, int i, int j, int id){
    int un=1;
    if (!player_turn)
    {
        un*=-1;
    }
    if (winner(occupied, id)==un) //gagner un morpion local
    {
        sum[id]+=10;
    }
    occupied[i][j]=(-1)*un; // tester bloquer adversaire
    if (winner(occupied, id)==-1){
        sum[id]+=20;
    }
    occupied[i][j]=un; // remettre 
    
    sum[id]=tictactoe_sum(occupied,matrix_eval,id);
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int eval(int (&occupied)[SIZE][SIZE],int (&matrix_eval)[SIZE][SIZE], int (&sum)[SIZE],int i, int j, int id, bool player_turn)
{
    int sum2=0;
    int sum_temp=sum[id];
    update_sum(occupied,matrix_eval,sum,player_turn,i,j,id);
    for (int i=0;i<SIZE;i++){
        if (player_turn)
        {
            sum2=max(sum2,sum[i]);
        } else
        {
            sum2=min(sum2,sum[i]);
        }
    }
    sum[id]=sum_temp;
    return sum2;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int minimax(int (&occupied)[SIZE][SIZE], int h, bool player_turn,int playable[SIZE][SIZE],bool (&avaible)[SIZE],int (&matrix_eval)[SIZE][SIZE], int (&sum)[SIZE], int i, int j, int id)
{
    //cpt++;
    //cerr<<"cpt 1 minimax : "<<cpt<<endl;
    if (end(occupied, h, id))
    {
        //return (1+h)*winner(occupied, id);
         return eval(occupied,matrix_eval,sum, i, j, id,player_turn);
    }
    int best_score=-500000; // - infini, tour du joueur
    if (player_turn)
    {
        for (int i=0;i<9;i++)
        {
            for (int j=0;j<9;j++)
            {
                if (occupied[i][j]==playable[i][j]) // tout deux à 0
                {
                    occupied[i][j]=1; //prochain move
                    playable[i][j]=2;
                    int playable_next[9][9]; //prochains coupsde l'adversaire
                    playable_next_generate(occupied,playable_next,avaible,i,j,id);
                    int score=minimax(occupied,h-1,false,playable_next,avaible,matrix_eval, sum, i, j, id);
                    occupied[i][j]=0;
                    playable[i][j]=0; //remettre à l'état initial au cas où, car on passe quasiment tout les tableaux en reference
                    best_score=max(best_score,score);
                }     
            }
        }
    } else //penser à remettre la version opti du min apres avoir test eval, cetait trop long sinon
{
        best_score*=-1;  // tour de l'adversaire, infini
        for (int i=0;i<3;i++)
        {
            for (int j=0;j<3;j++)
            {
                if (occupied[i][j]==0)
                {
                    occupied[i][j]=-1;
                    int score=minimax(occupied,h-1,false,playable,avaible,matrix_eval,sum, i , j, id) ;
                    occupied[i][j]=0;
                    best_score=min(best_score,score);
                }
                    
            }
        }
    }
    return best_score;
}
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------*/
int main()
{
    /*---------------------------------------------------------------------------------------------*/
    //profiter de 1000 millisec au 1er tour pour generer des variables comme la matrice d'évaluation
    int move[2];
    bool player_turn;
    bool avaible[9]; // indique si un morpion local est complet, à voir si changer en int pour aussi utiliser dans eval avec sum() 
    int occupied[9][9];
    int matrix_eval[9][9];
    int sum[9]; // somme des evals par morpion local
    for (int i = 0;i<9;i++)
    {
        for (int j = 0;j<9;j++)
        {
            occupied[i][j]=0;
            matrix_generate(matrix_eval,i,j);
        }
        
        avaible[i]=true;
    }
    for (int i=0;i<SIZE;i++)
    {
        sum[i]=tictactoe_sum(occupied,matrix_eval,i);
        cerr<<"i : "<<i<<" sum : "<<sum[i]<<endl;
    }
        

    /*---------------------------------------------------------------------------------------------*/

    while (1) {
        
        int opponent_row;
        int opponent_col;
        
        cin >> opponent_row >> opponent_col; cin.ignore();
        int id=tictactoe_id(opponent_row,opponent_col);
        int valid_action_count;
        cin >> valid_action_count; cin.ignore();
        if (opponent_row!=-1)
        {
            occupied[opponent_row][opponent_col]=-1;
            sum[id]=tictactoe_sum(occupied,matrix_eval,id);
        }
        player_turn=true;
        int best_score=-500000;
        if (valid_action_count==81) //pour commencer au centre coin sinon inutile
        {
            move[0]=3;
            move[1]=3;
            for (int i = 0; i < valid_action_count; i++) 
            {
                int row;
                int col;
                cin >> row >> col; cin.ignore();
            }
        } else
        {
            int playable[9][9];
            for (int i = 0;i<9;i++)
            {
                for (int j = 0;j<9;j++)
                {
                    playable[i][j]=2;
                }
            }
            for (int i = 0; i < valid_action_count; i++) {
                int row;
                int col;
                cin >> row >> col; cin.ignore();
                playable[row][col]=0;
            }        
                int h = min(2,valid_action_count); // hauteur du minimax
                for (int i = 0;i<9;i++)
                {
                    for (int j = 0;j<9;j++)
                    {
                        if(playable[i][j]==0)
                        {
                            occupied[i][j]=1;
                            playable[i][j]=2;
                            id=tictactoe_id(i,j);
                            int stock = minimax(occupied,h,player_turn,playable,avaible,matrix_eval, sum, i, j, id); 
                            if(best_score<stock)
                            {
                                best_score=stock;
                                move[0]=i;
                                move[1]=j;
                            }
                            occupied[i][j]=0;
                            playable[i][j]=0;
                        }
                    }
                }
        }
        id=tictactoe_id(move[0],move[1]);
        occupied[move[0]][move[1]]=1;
        sum[id]=tictactoe_sum(occupied,matrix_eval,id);
        for (int i=0;i<SIZE;i++)
        {
            cerr<<"i : "<<i<<" sum : "<<sum[i]<<endl;
        }
        cout << move[0] << " " << move[1] << endl;
    }
}