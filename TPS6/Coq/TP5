Require Import Arith.
Require Import Omega.
Require Export List.
Open Scope list_scope.
Import ListNotations.

Inductive is_sorted : list nat -> Prop :=
|is_sorted_nil : is_sorted nil
|is_sorted_un : forall e:nat, is_sorted(e::nil)
|is_sorted_cons : forall e h : nat, forall q : list nat,
 e <= h -> is_sorted (h::q) -> is_sorted(e::h::q).

Goal is_sorted([(S 0); (S(S 0)) ; (S(S(S 0)))]).
Proof.
apply is_sorted_cons.
auto.
apply is_sorted_cons.
auto.
apply is_sorted_un.
Qed.

